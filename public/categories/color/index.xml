<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>color | Academic</title>
    <link>/categories/color/</link>
      <atom:link href="/categories/color/index.xml" rel="self" type="application/rss+xml" />
    <description>color</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><lastBuildDate>Tue, 25 Feb 2020 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>color</title>
      <link>/categories/color/</link>
    </image>
    
    <item>
      <title>Use prismatic with after_scale() for finer control of colors in ggplot2</title>
      <link>/2020/02/25/use-prismatic-with-after_scale-for-finer-control-of-colors-in-ggplot2/</link>
      <pubDate>Tue, 25 Feb 2020 00:00:00 +0000</pubDate>
      <guid>/2020/02/25/use-prismatic-with-after_scale-for-finer-control-of-colors-in-ggplot2/</guid>
      <description>


&lt;p&gt;With the release of version 3.3.0 of ggplot2 came the ability to have more control over the aesthetic evaluation.
This allows us to modify the colors of the mapped palettes with &lt;a href=&#34;https://github.com/EmilHvitfeldt/prismatic&#34;&gt;prismatic&lt;/a&gt; now easier than ever.&lt;/p&gt;
&lt;div id=&#34;packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Packages 📦&lt;/h2&gt;
&lt;p&gt;We load the essential packages to wrangle, collect data (we will use tweets), scrape websites and handle emojis.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(ggplot2)
library(prismatic)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;examples&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Examples&lt;/h2&gt;
&lt;p&gt;Suppose you have a simple bar chart and you have added colors to each bar.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(diamonds, aes(cut)) +
  geom_bar(aes(fill = cut))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-06-use-prismatic-with-after_scale-for-finer-control-of-colors-in-ggplot2/index_files/figure-html/unnamed-chunk-1-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Next, suppose you would like to add a border around each bar.
Traditionally you could add a single color like black but it isn’t that satisfying as it doesn’t have any relation to the mapped colors.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(diamonds, aes(cut)) +
  geom_bar(aes(fill = cut), color = &amp;quot;black&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-06-use-prismatic-with-after_scale-for-finer-control-of-colors-in-ggplot2/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;now that &lt;code&gt;after_scale()&lt;/code&gt; is available for us we can base the color based on the mapped fill colors.
Below I have used &lt;code&gt;clr_darken()&lt;/code&gt; to create a border that is just slightly darker than the fill color.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(diamonds, aes(cut)) +
  geom_bar(aes(fill = cut, color = after_scale(clr_darken(fill, 0.3))))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-06-use-prismatic-with-after_scale-for-finer-control-of-colors-in-ggplot2/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;this could also have been done in reverse by supplying the color and modifying the fill after.
Notice how we are able to chain multiple color modifications together.
Here we hare taking the color, then desaturating it followed by some lighting.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(diamonds, aes(cut)) +
  geom_bar(aes(color = cut, 
               fill = after_scale(clr_lighten(clr_desaturate(color), 
                                              space = &amp;quot;combined&amp;quot;))))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-06-use-prismatic-with-after_scale-for-finer-control-of-colors-in-ggplot2/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you only need to specify one color directly you can use the &lt;code&gt;stage()&lt;/code&gt; function.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ggplot(diamonds, aes(cut)) +
  geom_bar(aes(fill = stage(start = cut, 
                            after_scale = clr_lighten(fill, space = &amp;quot;combined&amp;quot;))))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2020-03-06-use-prismatic-with-after_scale-for-finer-control-of-colors-in-ggplot2/index_files/figure-html/unnamed-chunk-5-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;details closed&gt;
&lt;p&gt;&lt;summary&gt; &lt;span title=&#34;Click to Expand&#34;&gt; current session info &lt;/span&gt; &lt;/summary&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;
─ Session info ───────────────────────────────────────────────────────────────
 setting  value                       
 version  R version 3.6.0 (2019-04-26)
 os       macOS Mojave 10.14.6        
 system   x86_64, darwin15.6.0        
 ui       X11                         
 language (EN)                        
 collate  en_US.UTF-8                 
 ctype    en_US.UTF-8                 
 tz       America/Los_Angeles         
 date     2020-04-20                  

─ Packages ───────────────────────────────────────────────────────────────────
 package     * version    date       lib source                     
 assertthat    0.2.1      2019-03-21 [1] CRAN (R 3.6.0)             
 backports     1.1.6      2020-04-05 [1] CRAN (R 3.6.0)             
 blogdown      0.18       2020-03-04 [1] CRAN (R 3.6.0)             
 bookdown      0.18       2020-03-05 [1] CRAN (R 3.6.0)             
 cli           2.0.2      2020-02-28 [1] CRAN (R 3.6.0)             
 clipr         0.7.0      2019-07-23 [1] CRAN (R 3.6.0)             
 codetools     0.2-16     2018-12-24 [1] CRAN (R 3.6.0)             
 colorspace    1.4-1      2019-03-18 [1] CRAN (R 3.6.0)             
 crayon        1.3.4      2017-09-16 [1] CRAN (R 3.6.0)             
 desc          1.2.0      2018-05-01 [1] CRAN (R 3.6.0)             
 details     * 0.2.1      2020-01-12 [1] CRAN (R 3.6.0)             
 digest        0.6.25     2020-02-23 [1] CRAN (R 3.6.0)             
 dplyr         0.8.5      2020-03-07 [1] CRAN (R 3.6.0)             
 ellipsis      0.3.0      2019-09-20 [1] CRAN (R 3.6.0)             
 emo           0.0.0.9000 2019-12-18 [1] Github (hadley/emo@3f03b11)
 evaluate      0.14       2019-05-28 [1] CRAN (R 3.6.0)             
 fansi         0.4.1      2020-01-08 [1] CRAN (R 3.6.0)             
 farver        2.0.3      2020-01-16 [1] CRAN (R 3.6.0)             
 generics      0.0.2      2018-11-29 [1] CRAN (R 3.6.0)             
 ggplot2     * 3.3.0      2020-03-05 [1] CRAN (R 3.6.0)             
 glue          1.4.0      2020-04-03 [1] CRAN (R 3.6.0)             
 gtable        0.3.0      2019-03-25 [1] CRAN (R 3.6.0)             
 htmltools     0.4.0      2019-10-04 [1] CRAN (R 3.6.0)             
 httr          1.4.1      2019-08-05 [1] CRAN (R 3.6.0)             
 knitr       * 1.28       2020-02-06 [1] CRAN (R 3.6.0)             
 labeling      0.3        2014-08-23 [1] CRAN (R 3.6.0)             
 lifecycle     0.2.0      2020-03-06 [1] CRAN (R 3.6.0)             
 lubridate     1.7.8      2020-04-06 [1] CRAN (R 3.6.0)             
 magrittr      1.5        2014-11-22 [1] CRAN (R 3.6.0)             
 munsell       0.5.0      2018-06-12 [1] CRAN (R 3.6.0)             
 pillar        1.4.3      2019-12-20 [1] CRAN (R 3.6.0)             
 pkgconfig     2.0.3      2019-09-22 [1] CRAN (R 3.6.0)             
 png           0.1-7      2013-12-03 [1] CRAN (R 3.6.0)             
 prismatic   * 0.2.0.9000 2020-03-15 [1] local                      
 purrr         0.3.3      2019-10-18 [1] CRAN (R 3.6.0)             
 R6            2.4.1      2019-11-12 [1] CRAN (R 3.6.0)             
 Rcpp          1.0.4.6    2020-04-09 [1] CRAN (R 3.6.0)             
 rlang         0.4.5      2020-03-01 [1] CRAN (R 3.6.0)             
 rmarkdown     2.1        2020-01-20 [1] CRAN (R 3.6.0)             
 rprojroot     1.3-2      2018-01-03 [1] CRAN (R 3.6.0)             
 rstudioapi    0.11       2020-02-07 [1] CRAN (R 3.6.0)             
 scales        1.1.0      2019-11-18 [1] CRAN (R 3.6.0)             
 sessioninfo   1.1.1      2018-11-05 [1] CRAN (R 3.6.0)             
 stringi       1.4.6      2020-02-17 [1] CRAN (R 3.6.0)             
 stringr       1.4.0      2019-02-10 [1] CRAN (R 3.6.0)             
 tibble        3.0.0      2020-03-30 [1] CRAN (R 3.6.2)             
 tidyselect    1.0.0      2020-01-27 [1] CRAN (R 3.6.0)             
 vctrs         0.2.4      2020-03-10 [1] CRAN (R 3.6.0)             
 viridisLite   0.3.0      2018-02-01 [1] CRAN (R 3.6.0)             
 withr         2.1.2      2018-03-15 [1] CRAN (R 3.6.0)             
 xfun          0.13       2020-04-13 [1] CRAN (R 3.6.2)             
 xml2          1.3.0      2020-04-01 [1] CRAN (R 3.6.2)             
 yaml          2.2.1      2020-02-01 [1] CRAN (R 3.6.0)             

[1] /Library/Frameworks/R.framework/Versions/3.6/Resources/library
&lt;/code&gt;&lt;/pre&gt;
&lt;/details&gt;
&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Paletteer version 1.0.0</title>
      <link>/2019/12/18/paletteer-version-1.0.0/</link>
      <pubDate>Wed, 18 Dec 2019 00:00:00 +0000</pubDate>
      <guid>/2019/12/18/paletteer-version-1.0.0/</guid>
      <description>


&lt;p&gt;I’m over-the-moon excited to announce the release of version 1.0.0 of &lt;a href=&#34;https://github.com/EmilHvitfeldt/paletteer&#34;&gt;paletteer&lt;/a&gt;.
This version comes with breaking changes and major quality of life improvements.
I will unironically name this the “first useable version” for reasons that will be obvious later in this post.&lt;/p&gt;
&lt;div id=&#34;breaking-changes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Breaking Changes 💥&lt;/h2&gt;
&lt;p&gt;There has been a significant change in syntax for this version.
For versions &amp;lt;= 0.2.1 the way to specify a palette was done using the arguments &lt;code&gt;package&lt;/code&gt; and &lt;code&gt;palette&lt;/code&gt;.
Both could be taken as both string or unquoted strings.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# versions &amp;lt;= 0.2.1
paletteer_c(&amp;quot;gameofthrones&amp;quot;, &amp;quot;baratheon&amp;quot;, 10)

paletteer_d(nord, halifax_harbor)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;While convinient and cool to use &lt;a href=&#34;https://edwinth.github.io/blog/nse/&#34;&gt;NSE&lt;/a&gt;,
tt was not very useful and I had &lt;a href=&#34;https://github.com/EmilHvitfeldt/paletteer/issues/17&#34;&gt;several&lt;/a&gt; &lt;a href=&#34;https://github.com/EmilHvitfeldt/paletteer/issues/13&#34;&gt;people&lt;/a&gt; &lt;a href=&#34;https://github.com/EmilHvitfeldt/paletteer/issues/53&#34;&gt;complaining&lt;/a&gt;.
I realized that using NSE wasn’t a good fit at all for this package.
This means that from version 1.0.0 and moving forward only strings will be used to specify palettes.&lt;/p&gt;
&lt;p&gt;Secondly, I have eliminated the &lt;code&gt;package&lt;/code&gt; argument and from now on all specification is done on the form &lt;code&gt;package::palette&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;# versions &amp;gt;= 1.0.0
paletteer_c(&amp;quot;gameofthrones::baratheon&amp;quot;, 10)

paletteer_d(&amp;quot;nord::halifax_harbor&amp;quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above change is the most likely to break your earlier code.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;autocomplete&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Autocomplete 🎉&lt;/h2&gt;
&lt;p&gt;The biggest downside to the original version of &lt;strong&gt;paletteer&lt;/strong&gt; and later version was the lack of discoverability.
Unless you knew the palette you wanted and the EXACT spelling you couldn’t really use &lt;strong&gt;paletteer&lt;/strong&gt;.
Sure you could browse &lt;code&gt;palettes_c_names&lt;/code&gt; and &lt;code&gt;palettes_d_names&lt;/code&gt; like some caveman,
but to be honest the package felt more like a novelty project than a useful tool.&lt;/p&gt;
&lt;p&gt;All of this changes with version 1.0.0 🎉!
Simply starting by typing &lt;code&gt;paletteer_d()&lt;/code&gt; or any of the other related functions and simply hit tab.
This will prompt all the names of available palettes which you then can search through using fuzzy search.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;complete1.gif&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This change is the single biggest improvement to this package.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Discoverability ✅&lt;/li&gt;
&lt;li&gt;No more missspellings ✅&lt;/li&gt;
&lt;li&gt;Total awesomeness ✅&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And yes, it also work with the &lt;code&gt;scale_*_paletteer()&lt;/code&gt; functions 🙌&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;complete2.gif&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;prismatic-integration&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Prismatic integration 💎&lt;/h2&gt;
&lt;p&gt;You can see from the first gif that the output is a little more colorful then what you are used to.
This all comes from the &lt;a href=&#34;https://github.com/EmilHvitfeldt/prismatic&#34;&gt;prismatic&lt;/a&gt; package I released earlier this year.
The &lt;strong&gt;prismatic&lt;/strong&gt; colors objects that are returned from all &lt;strong&gt;paletteer&lt;/strong&gt; functions will be printed with colorful backgrounds provided that the &lt;a href=&#34;https://github.com/r-lib/crayon&#34;&gt;crayon&lt;/a&gt; package is available, otherwise, it will just print normally.
This is great for when you want to take a quick look at the colors you are about to use.
Please note that the background can only take &lt;a href=&#34;https://github.com/r-lib/crayon#256-colors&#34;&gt;256&lt;/a&gt; different colors.
Some palettes will fit nicely inside these 256 values and will display nicely (viridis::magma) below, while other palettes with a lot of value will show weird jumps in colors (gameofthrones::greyjoy)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;prismatic1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;If you want more accurate color depictions you can simply &lt;code&gt;plot()&lt;/code&gt; the output to see the real colors&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(paletteer_c(&amp;quot;viridis::magma&amp;quot;, 10))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-12-19-paletteer-version-1-0-0/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;plot(paletteer_c(&amp;quot;gameofthrones::greyjoy&amp;quot;, 100))&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-12-19-paletteer-version-1-0-0/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;more-color-palettes&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;More color palettes 🌈&lt;/h2&gt;
&lt;p&gt;It wouldn’t be a &lt;strong&gt;paletteer&lt;/strong&gt; release without more palettes.
And this release is no different!
This update brings us 654 new palettes!!! from 19 different packages bringing out total up to 1759.
I did a little live-tweeting while implementing these packages so you can take a look at the newly included palettes here:&lt;/p&gt;
&lt;blockquote class=&#34;twitter-tweet&#34;&gt;
&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;
I&#39;ll be adding a whole bunch of new palettes to {paletteer} tonight! 🌈&lt;br&gt;&lt;br&gt;Read this thread if you want to see the new colorful goodies coming your way!&lt;br&gt;&lt;br&gt;❤️💙💚🧡💛💜&lt;a href=&#34;https://twitter.com/hashtag/rstats?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#rstats&lt;/a&gt; &lt;a href=&#34;https://t.co/c0qK27nc4N&#34;&gt;pic.twitter.com/c0qK27nc4N&lt;/a&gt;
&lt;/p&gt;
— Emil Hvitfeldt (&lt;span class=&#34;citation&#34;&gt;@Emil_Hvitfeldt&lt;/span&gt;) &lt;a href=&#34;https://twitter.com/Emil_Hvitfeldt/status/1203508809269800962?ref_src=twsrc%5Etfw&#34;&gt;December 8, 2019&lt;/a&gt;
&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;
&lt;p&gt;That is all I have for you this time around if you create or find more palette packages please go over and file &lt;a href=&#34;https://github.com/EmilHvitfeldt/paletteer/issues&#34;&gt;an issue&lt;/a&gt; so they can be included as well.
Thank you!&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Manipulating colors with {prismatic}</title>
      <link>/2019/10/01/manipulating-colors-with-prismatic/</link>
      <pubDate>Tue, 01 Oct 2019 00:00:00 +0000</pubDate>
      <guid>/2019/10/01/manipulating-colors-with-prismatic/</guid>
      <description>


&lt;p&gt;I’m happy to announce my newest package &lt;a href=&#34;https://github.com/EmilHvitfeldt/prismatic&#34;&gt;prismatic&lt;/a&gt; which facilitates simple manipulations of colors. I had been working on this package online and offline for some time, but the &lt;a href=&#34;https://github.com/tidyverse/ggplot2/pull/3534&#34;&gt;promise of easy manipulation of mapped data in ggplot2&lt;/a&gt; forced me to get some work done to get this package out before ggplot2 version 3.3.0. (as of time of writing.)&lt;/p&gt;
&lt;p&gt;This post will go over some of the finer details with lots of pretty pictures!&lt;/p&gt;
&lt;div id=&#34;loading-packages&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Loading Packages&lt;/h2&gt;
&lt;p&gt;The prismatic package is fairly low dependency with only 1 import being &lt;a href=&#34;https://github.com/thomasp85/farver&#34;&gt;farver&lt;/a&gt; for lightning fast conversion between color spaces. I have also loaded the &lt;a href=&#34;http://colorspace.r-forge.r-project.org/&#34;&gt;colorspace&lt;/a&gt; package, from which some of the following functions have been inspired. I will use colorspace to enable plotting of multiple color palettes side by side, but I will not showcase the code each time. Go to the end of the post for example code for comparison plots.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(prismatic)
library(colorspace) # for plotting functions
library(magrittr) # for the glorious pipe&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;let-me-see-the-colors&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Let me see the colors!!&lt;/h2&gt;
&lt;p&gt;If you have seen my work, you will properly know that I &lt;a href=&#34;https://github.com/EmilHvitfeldt/r-color-palettes&#34;&gt;like&lt;/a&gt; &lt;a href=&#34;https://github.com/EmilHvitfeldt/paletteer&#34;&gt;colors&lt;/a&gt; &lt;a href=&#34;https://github.com/EmilHvitfeldt/quickpalette&#34;&gt;alot&lt;/a&gt;! But being also to quickly inspect some colors have always been a little too much work. Now all you have to do it pass your colors to &lt;code&gt;color()&lt;/code&gt; (or &lt;code&gt;colour()&lt;/code&gt; for our friends across the pond) to get a &lt;color&gt; object which has a nice &lt;code&gt;plot()&lt;/code&gt; method&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rainbow(10) %&amp;gt;% color() %&amp;gt;% plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-2-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hcl.colors(25) %&amp;gt;% color() %&amp;gt;% plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-3-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;scico::scico(256, palette = &amp;quot;buda&amp;quot;) %&amp;gt;% color() %&amp;gt;% plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-4-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Which I would like to think is one of the main features of the package. If you happens to have &lt;a href=&#34;https://github.com/r-lib/crayon&#34;&gt;crayon&lt;/a&gt; available you will see a approximation of the colors with a filled in background (this limited to 256 colors so you milage might very, when in doubt use &lt;code&gt;plot()&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;print.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;This is the extent of what the color object can do.&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;manipulations&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Manipulations&lt;/h2&gt;
&lt;p&gt;The second star of the package is the &lt;a href=&#34;https://emilhvitfeldt.github.io/prismatic/reference/index.html&#34;&gt;collection of functions&lt;/a&gt; to manipulate the colors. All these functions have a couple of things in common.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;They all start with &lt;code&gt;clr_&lt;/code&gt; for easy auto completion in your favorite IDE.&lt;/li&gt;
&lt;li&gt;They all take a vector of colors as the first argument and results a colors object of the same length.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;these two facts make the function super pipe friendly.&lt;/p&gt;
&lt;div id=&#34;saturation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Saturation&lt;/h3&gt;
&lt;p&gt;The two functions &lt;code&gt;clr_saturate()&lt;/code&gt; and &lt;code&gt;clr_desaturate()&lt;/code&gt; both modifies the &lt;a href=&#34;https://en.wikipedia.org/wiki/HSL_and_HSV#Saturation&#34;&gt;saturation&lt;/a&gt; of a color. It takes a single additional argument to specifying the degree of which the (de)saturation should occur. These values should be between 0(nothing happens) and 1(full on power!).&lt;/p&gt;
&lt;p&gt;notice how you don’t have to call &lt;code&gt;color()&lt;/code&gt; on the output of &lt;code&gt;clr_desaturate()&lt;/code&gt; as it already returns a colors object.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hcl.colors(10, &amp;quot;plasma&amp;quot;) %&amp;gt;%
  clr_desaturate(0.8) %&amp;gt;%
  plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-6-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-7-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Example done with Mango palette from &lt;a href=&#34;https://github.com/johannesbjork/LaCroixColoR&#34;&gt;LaCroixColoR&lt;/a&gt; package.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-8-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;seeing-life-in-black-and-white&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Seeing life in black and white&lt;/h3&gt;
&lt;p&gt;Turns out there is a &lt;a href=&#34;https://www.tannerhelland.com/3643/grayscale-image-algorithm-vb6/&#34;&gt;lot of different ways&lt;/a&gt; to turn colors into grayscale. Prismatic has implemented a handful of these. Notice how the viridis palette is still working once you have it transformed to black and white.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hcl.colors(10) %&amp;gt;%
  clr_greyscale() %&amp;gt;%
  plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-9-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;Be advised that not all of these methods are meant to be perceptually uniform.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-10-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;negate&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Negate&lt;/h3&gt;
&lt;p&gt;Negation of a color is pretty simple. it will just pick the opposite color in &lt;a href=&#34;https://en.wikipedia.org/wiki/RGB_color_space&#34;&gt;RGB space&lt;/a&gt;.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;terrain.colors(10) %&amp;gt;%
  clr_negate() %&amp;gt;%
  plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-11-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-12-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;mixing&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Mixing&lt;/h3&gt;
&lt;p&gt;Mixing is just adding colors together. Thus my mixing a color with red would make a color more red.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rainbow(10) %&amp;gt;%
  clr_mix(&amp;quot;red&amp;quot;) %&amp;gt;%
  plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-13-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-14-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-15-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;rotation&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Rotation&lt;/h3&gt;
&lt;p&gt;the &lt;code&gt;clr_rotate()&lt;/code&gt; function will take a color and rotate its hue, which is a way walk around the rainbow.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;terrain.colors(10) %&amp;gt;%
  clr_rotate(90) %&amp;gt;%
  plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-16-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-17-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;color-blindness&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Color blindness&lt;/h3&gt;
&lt;p&gt;also includes 3 functions (&lt;code&gt;clr_protan()&lt;/code&gt;, &lt;code&gt;clr_deutan()&lt;/code&gt; and &lt;code&gt;clr_tritan()&lt;/code&gt;) to simulate colorblindness. These functions has a &lt;code&gt;severity&lt;/code&gt; argument to control the strength of the deficiency.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;hcl.colors(10) %&amp;gt;%
  clr_deutan() %&amp;gt;%
  plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-18-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-19-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-20-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-21-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;light-and-darkness&#34; class=&#34;section level3&#34;&gt;
&lt;h3&gt;Light and darkness&lt;/h3&gt;
&lt;p&gt;Lastly we have functions to simulate lightness and darkness. This is surprisingly hard to do and no one way works great all the time. Please refer to the excellent &lt;a href=&#34;https://arxiv.org/abs/1903.06490&#34;&gt;colorspace paper&lt;/a&gt; for more information. These functions (&lt;code&gt;clr_lighten()&lt;/code&gt; and &lt;code&gt;clr_darken()&lt;/code&gt;) also include a &lt;code&gt;space&lt;/code&gt; argument to determine the space in which to perform the transformation. Please try each of these to find the optimal method for your use case.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;rainbow(10) %&amp;gt;%
  clr_darken() %&amp;gt;%
  plot()&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-22-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-23-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;/post/2019-10-01-manipulating-colors-with-prismatic/index_files/figure-html/unnamed-chunk-24-1.png&#34; width=&#34;700px&#34; style=&#34;display: block; margin: auto;&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id=&#34;comparison-code&#34; class=&#34;section level2&#34;&gt;
&lt;h2&gt;Comparison Code&lt;/h2&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;swatchplot(
  list(
    saturate = rbind(&amp;quot;0&amp;quot; = clr_rotate(terrain.colors(10),  0),
                     &amp;quot;60&amp;quot; = clr_rotate(terrain.colors(10),  60),
                     &amp;quot;120&amp;quot; = clr_rotate(terrain.colors(10),  120),
                     &amp;quot;180&amp;quot; = clr_rotate(terrain.colors(10),  180),
                     &amp;quot;240&amp;quot; = clr_rotate(terrain.colors(10),  240),
                     &amp;quot;300&amp;quot; = clr_rotate(terrain.colors(10),  300)),
    desaturate = rbind(&amp;quot;0&amp;quot; = clr_rotate(hcl.colors(10),  0),
                       &amp;quot;60&amp;quot; = clr_rotate(hcl.colors(10),  60),
                       &amp;quot;120&amp;quot; = clr_rotate(hcl.colors(10),  120),
                       &amp;quot;180&amp;quot; = clr_rotate(hcl.colors(10),  180),
                       &amp;quot;240&amp;quot; = clr_rotate(hcl.colors(10),  240),
                       &amp;quot;300&amp;quot; = clr_rotate(hcl.colors(10),  300))
  ),
  nrow = 7, line = 2.5
)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
