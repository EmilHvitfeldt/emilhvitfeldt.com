{
  "hash": "291380d605c32f3428547f041794545c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: 'Slidecraft 101: Better SCSS files'\ndescription: |\n  Using sass interpolation, functions and mixin for the most in your style sheets\ndate: '2024-07-01'\ncategories:\n  - slidecraft 101\n  - quarto\nimage: \"featured.jpg\"\n---\n\n\nHello and welcome back to my multi-part series about what I like to call **slidecrafting**; The art of putting together slides that are functional and aesthetically pleasing. I will be using [quarto presentations](https://quarto.org/). This is the eighth post, you can find all other posts in the [slidecraft 101](../../project/slidecraft-101/index.qmd#blog-posts) project.\n\nThis post celebrates the [asciicast](https://github.com/r-lib/asciicast) R package to showcase rich output.\n\n## Without asciicast\n\nWhen R code produces messages with colors or styling, they are typically lost when we write slides\n\n<iframe class=\"slide-deck\" src=\"_no-asciicast.html\">\n\n</iframe>\n\n<a href=\"_no-asciicast.qmd\" target=\"_blank\" class=\"listing-slides btn-links\">{{< fa file >}}qmd<a>\n\n## Default asciicast\n\nThis is where the amazing [asciicast](https://github.com/r-lib/asciicast) R package comes into play. {asciicast} takes an R script and turns it into an [asciinema](https://asciinema.org/) cast. We will use the very convenient [init_knitr_engine()](https://asciicast.r-lib.org/reference/init_knitr_engine.html) function to make this as easy as possible.\n\nWe can add the {asciicast} {knitr} engine by placing the following chunk at the beginning of our document.\n\n```{{r}}\nasciicast::init_knitr_engine()\n```\n\nAnd then we toggle asciicast output by replacing \n\n```{{r}}\nlibrary(tidymodels)\n```\n\nwith\n\n```{{asciicast}}\nlibrary(tidymodels)\n```\n\nWith this change, we get the following output, nicely styled with colors and everything.\n\n<iframe class=\"slide-deck\" src=\"_asciicast-default.html\">\n\n</iframe>\n\n<a href=\"_asciicast-default.qmd\" target=\"_blank\" class=\"listing-slides btn-links\">{{< fa file >}}qmd<a>\n\n::: {.callout-note}\nThe output of asciicast will by default fill the screen horizontally, but for some reason when setting `format: revealjs: self-contained: true` it doesn't. All examples use this option for a better blogging experience. You just have to trust me that it looks better without the option.\n:::\n\n## Using startup to seed, load some packages\n\nThe full list of arguments to `asciicast_init_knitr_engine()` is as follows\n\n\n::: {.cell}\n\n```{.r .cell-code}\nformals(asciicast::init_knitr_engine)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$echo\n[1] FALSE\n\n$same_process\n[1] TRUE\n\n$timeout\n[1] 10\n\n$startup\nNULL\n\n$record_env\nNULL\n\n$echo_input\n[1] TRUE\n\n$interactive\n[1] TRUE\n```\n\n\n:::\n:::\n\n\nI will talk about the 3 I use, which are `same_process`, `echo`, and `echo_input`. The two go together. `same_process` which defaults to `TRUE`, does what it says. It determines whether all the asciicast chunks should be in the same process or not. If you want to show things that only happen once a session, you might want to turn this off which is done this way\n\n```{{r}}\nasciicast::init_knitr_engine(\n  same_process = FALSE\n)\n```\n\nand gives the following results\n\n<iframe class=\"slide-deck\" src=\"_asciicast-same_process.html\">\n\n</iframe>\n\n<a href=\"_asciicast-same_process.qmd\" target=\"_blank\" class=\"listing-slides btn-links\">{{< fa file >}}qmd<a>\n\nYou will notice that the code that is being run is included in the asciicast output. This is happening because the default arguments `echo = FALSE` and `echo_input = TRUE`. By swapping these options we get the code as normal quarto code, with the output as asciicast\n\n```{{r}}\nasciicast::init_knitr_engine(\n  echo = TRUE,\n  echo_input = FALSE\n)\n```\n\n<iframe class=\"slide-deck\" src=\"_asciicast-echos.html\">\n\n</iframe>\n\n<a href=\"_asciicast-echos.qmd\" target=\"_blank\" class=\"listing-slides btn-links\">{{< fa file >}}qmd<a>\n\nIt wouldn't make much sense to set both of these to `TRUE` as you would have duplication, but there are certainly cases where you want both of these to be `FALSE` as you just want the output.\n\n## Using theme argument\n\nThe output is styled a certain way, and we can change it. At the time of writing, the following 10 premade themes are available.\n\n- asciinema\n- tango\n- solarized-dark\n- solarized-light\n- seti\n- monokai\n- github-light\n- github-dark\n- pkgdown\n- readme\n\nWe can toggle any of these by setting the option `asciicast_theme`. The below example showcases the `\"solarized-light\"` theme.\n\n```{{r}}\noptions(asciicast_theme = \"solarized-light\")\n```\n\n<iframe class=\"slide-deck\" src=\"_asciicast-solarized.html\">\n\n</iframe>\n\n<a href=\"_asciicast-solarized.qmd\" target=\"_blank\" class=\"listing-slides btn-links\">{{< fa file >}}qmd<a>\n\nIf none of these is what you need, you can use a completely custom theme. I suggest that you modify one of the [existing theme](https://github.com/r-lib/asciicast/blob/4e6302182264a0fe7c58c427c9878b9135dac4fd/R/svg.R#L190)\n\nFor this example, the `github-light` theme was modified by changing the `background` to pure white to match the background of the slide, thus having it blend into the slide.\n\n```{{r}}\noptions(\n  asciicast_theme = list(\n    black         = c(grDevices::col2rgb(\"#073642\")),\n    red           = c(grDevices::col2rgb(\"#dc322f\")),\n    green         = c(grDevices::col2rgb(\"#859900\")),\n    yellow        = c(grDevices::col2rgb(\"#b58900\")),\n    blue          = c(grDevices::col2rgb(\"#268bd2\")),\n    magenta       = c(grDevices::col2rgb(\"#d33682\")),\n    cyan          = c(grDevices::col2rgb(\"#2aa198\")),\n    white         = c(grDevices::col2rgb(\"#eee8d5\")),\n    light_black   = c(grDevices::col2rgb(\"#002b36\")),\n    light_red     = c(grDevices::col2rgb(\"#cb4b16\")),\n    light_green   = c(grDevices::col2rgb(\"#586e75\")),\n    light_yellow  = c(grDevices::col2rgb(\"#657c83\")),\n    light_blue    = c(grDevices::col2rgb(\"#839496\")),\n    light_magenta = c(grDevices::col2rgb(\"#6c71c4\")),\n    light_cyan    = c(grDevices::col2rgb(\"#93a1a1\")),\n    light_white   = c(grDevices::col2rgb(\"#fdf6e3\")),\n    background    = c(grDevices::col2rgb(\"#ffffff\")),\n    cursor        = c(grDevices::col2rgb(\"#657b83\")),\n    bold          = c(grDevices::col2rgb(\"#657b83\")),\n    text          = c(grDevices::col2rgb(\"#657b83\"))\n  )\n)\n```\n\n<iframe class=\"slide-deck\" src=\"_asciicast-theme.html\">\n\n</iframe>\n\n<a href=\"_asciicast-theme.qmd\" target=\"_blank\" class=\"listing-slides btn-links\">{{< fa file >}}qmd<a>\n\n## Roundup\n\nI just recently learned about {asciicast} and I love it. If you know of any other cool tools or packages, please reach out and share them with me!\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}