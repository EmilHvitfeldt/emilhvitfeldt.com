---
title: 'Sharing Pictures of Code'
description: |
  Many different ways to share pictures of code
date: '2023-12-06'
categories:
image: "featured.png"
css: "stars.css"
---

When sharing code on social media, we often tend to do so using pictures to show the code easily. A lot of times this happens because most social media sites are not equipped to format code beyond 1 or 2 lines of code. It is also worth noting that whenever possible the code is meant to be run by other people. Make it easy for them to do so. Either by putting the code in the alt text or linking to the code snippet somewhere else with sites like [pastebin.com](https://pastebin.com/) and [gist.github.com](https://gist.github.com/).

This post goes over the different ways one can generate pictures of code for sharing, in part to remind myself of the options.

A two-pronged rating system is used to evaluate each of the methods. Clocks indicate "time to create" and confetti indicates "flair".

```{r}
#| label: ratings
#| echo: false
library(htmltools)

clock <- function() {
  readLines("clock.svg") |>
    HTML()
}

tada <- function() {
  readLines("tada.svg") |>
    HTML()
}

clocks <- function(x) {
  div(
   class = "stars",
   clock(),
   clock(),
   clock(),
   clock(),
   clock(),
   div(class = "cover", style = glue::glue("width: {x}%;"))
  )
}

tadas <- function(x) {
  div(
   class = "stars",
   tada(),
   tada(),
   tada(),
   tada(),
   tada(),
   div(class = "cover", style = glue::glue("width: {x}%;"))
  )
}

ratings <- function(ease, flair) {
  div(
    style = "display: flex; width: 100%'",
    clocks(100 - ease),
    tadas(100 - flair)
  )
}
```

## Screenshot

`r ratings(100, 20)`

![](screenshot.png)

By far the easiest way to share your code is to take a screenshot inside your code editor. You might need to add a little space around it to only get what you need.

## carbon.now.sh

`r ratings(90, 40)`

![](carbon.png)

[carbon](https://carbon.now.sh/) is the first website that comes to mind when talking about creating images of code. It supports a wide array of highlighting themes and supported languages. As well as export buttons.

Another neat thing is that the snippet is encoded in the url such that you can find the above example by [going to this url](https://carbon.now.sh/?bg=rgba(252,205,205,1)&t=vscode&wt=none&l=r&width=680&ds=true&dsyoff=20px&dsblur=68px&wc=true&wa=true&pv=56px&ph=56px&ln=false&fl=1&fm=Hack&fs=14px&lh=133%25&es=2x&wm=false&code=library(embed)%250A%250Adata(flights%252C%2520package%2520%253D%2520%2522nycflights13%2522)%250A%250Arecipe(arr_delay%2520~%2520carrier%2520%252B%2520tailnum%2520%252B%2520origin%2520%252B%2520dest%252C%2520data%2520%253D%2520flights)%2520%257C%253E%250A%2520%2520step_lencode_mixed(all_nominal_predictors()%252C%2520outcome%2520%253D%2520vars(arr_delay))%2520%257C%253E%250A%2520%2520prep()%2520%257C%253E%250A%2520%2520bake(new_data%2520%253D%2520NULL)%250A%2523%253E%2520%2523%2520A%2520tibble%253A%2520336%252C776%2520%25C3%2597%25205).

## ray.so

`r ratings(80, 40)`

![](rayso.png)

[ray.so](https://ray.so/) is very similar to carbon. It has fewer choices of themes, but each theme is a gradient which gives a different feel. A dark mode toggle and padding options make it different enough from carbon to be on this list.

## codeimage.dev

`r ratings(80, 50)`

![](codeimage.png)

[codeimage](https://codeimage.dev/) is similar to the solutions we have seen so far. It comes with a visual list of themes and many options to customize your image. An underrated feature is the **randomizer** button to quickly get inspiration.

## codesnap.dev

`r ratings(50, 60)`

![](codesnap.png)

[codesnap](https://codesnap.dev/) has everything that the previous methods have, but brings a little more to the table. There are now many options and dials to change the appearance of the code and its windows. This time we can add many other elements such as arrows, text, profile pictures, and watermarks. Some of these features are locked behind a login.

## codekeep.io/screenshot

`r ratings(50, 60)`

![](codekeep.png)

[codekeep](https://codekeep.io/screenshot) is very similar in functionality to codesnap.dev. One thing that makes them stand apart is that codekeep includes several humourous templates such as Windows XP and NES.

## snappify.com

`r ratings(40, 65)`

![](snappify.png)

[snappify](https://snappify.com/) is one of my recent favorite websites I have found. It is still quite new and appears to appeal to slidecrafting as it allows you to create multiple slides of code. But it has much of what codesnap and codekeep can offer as well. The arrows are quite nice in this version as you can drag and stretch it to be exactly where you want it to be.

## Homegrown

`r ratings(25, 100)`

![](homegrown.png)

What all the above solutions have in common, is that they use html and css to slide the code, and then you screenshot it. And that works fine the majority of the time because the defaults and settings are plentiful enough to get you where you need. But once in a while, there are things you want to do that the platform doesn't support, and you have to make the thing yourselves. 

I use [Quarto Revealjs](https://quarto.org/docs/presentations/revealjs/) slides with my [codewindow](https://github.com/EmilHvitfeldt/quarto-revealjs-codewindow) extension to get a similar feel to all the solutions out here. Then I can modify css to my heart's desire to get exactly what I want.
