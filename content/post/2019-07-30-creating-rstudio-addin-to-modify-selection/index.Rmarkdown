---
title: Creating RStudio addin to modify selection
date: '2019-07-30'
categories:
  - rstudio addins
tags:
  - rstudio addins
summary: Creating addins to be used in RStudio.
image:
  preview_only: true
---

```{r setup, include=FALSE}
library(knitr)
opts_chunk$set(
  echo = TRUE,
  cache = TRUE,
  collapse = TRUE,
  fig.width = 7, 
  fig.align = 'center',
  fig.asp = 0.618, # 1 / phi
  out.width = "700px")
knit_hooks$set(optipng = hook_optipng)
opts_chunk$set("optipng" = "-o5")
```

# The problem

Lately, there has been some well-deserved buzz around addins in RStudio, [datapasta](https://github.com/milesmcbain/datapasta) being one and [hrbraddins](https://gitlab.com/hrbrmstr/hrbraddins) being another highly liked one. 

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">I find datapasta helpful for creating little tibbles for teaching. I&#39;ll find some interesting data online and just copy and paste the table directly into the correct format. You can also set up keyboard shortcuts, because who doesn&#39;t love a keyboard shortcut. Thanks <a href="https://twitter.com/MilesMcBain?ref_src=twsrc%5Etfw">@MilesMcBain</a> <a href="https://t.co/deaZVVYYDu">pic.twitter.com/deaZVVYYDu</a></p>&mdash; We are R-Ladies (@WeAreRLadies) <a href="https://twitter.com/WeAreRLadies/status/1153284810191847425?ref_src=twsrc%5Etfw">July 22, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

<blockquote class="twitter-tweet"><p lang="en" dir="ltr">My keyboard shortcut for this lil&#39; function gets quite the workoutâ€¦<br>ðŸ“º &quot;hrbraddins::bare_combine()&quot; by <a href="https://twitter.com/hrbrmstr?ref_src=twsrc%5Etfw">@hrbrmstr</a> <a href="https://t.co/8dwqNEso0B">https://t.co/8dwqNEso0B</a> <a href="https://twitter.com/hashtag/rstats?src=hash&amp;ref_src=twsrc%5Etfw">#rstats</a> <a href="https://t.co/gyqz2mUE0Y">pic.twitter.com/gyqz2mUE0Y</a></p>&mdash; Mara Averick (@dataandme) <a href="https://twitter.com/dataandme/status/1155842512743030785?ref_src=twsrc%5Etfw">July 29, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>

All of this is done with [RStudio Addins](https://www.rstudio.com/resources/webinars/understanding-add-ins/) using the [rstudioapi](https://github.com/rstudio/rstudioapi) r package.

A lot of the popular addins follows the same simple formula

- extract highlighted text
- modify extracted text
- replace highlighted text with modified text.

if your problem can be solved with the above steps, then this post is for you.

# The solution

Once you have found the name of your addin, go to your package directory, or [create a new package](https://www.hvitfeldt.me/blog/usethis-workflow-for-package-development/). Then we use [usethis](https://usethis.r-lib.org/) to create a .R file for the function and to create the necessary infrastructure to let RStudio know it is a Addin.

```{r, eval=FALSE}
use_r("name_of_your_addin")
use_addin("name_of_your_addin")
```

The `inst/rstudio/addins.dcf` file will be populated to make a binding between your function to the addins menu. From here you will in `Name` to change the text of the button in the drop-down menu and change the `description` to change the hover text.

```{r, eval=FALSE}
Name: New Addin Name
Description: New Addin Description
Binding: name_of_your_addin
Interactive: false
```

now you can go back to the .R to write your function. Below is the minimal code needed. Just replace `any_function` with a function that takes a string and returns a modified string. build the package and you are done!

```{r}
example <- function() {
  
  # Gets The active Documeent
  ctx <- rstudioapi::getActiveDocumentContext()

  # Checks that a document is active
  if (!is.null(ctx)) {
    
    # Extracts selection as a string
    selected_text <- ctx$selection[[1]]$text

    # modify string
    selected_text <- any_function(selected_text)
    
    # replaces selection with string
    rstudioapi::modifyRange(ctx$selection[[1]]$range, selected_text)
  }
}
```

# Examples - slugify

While I was writing this post I created an addin to turn the title of the blog post into a slug I could use. I replaced

```{r, eval=FALSE}
selected_text <- any_function(selected_text)
```

with 

```{r, eval=FALSE}
selected_text <- stringr::str_to_lower(selected_text)
selected_text <- stringr::str_replace_all(selected_text, " ", "-")
```

Which gave me this little gem of an addin! 

![](htrPc6d.gif)

```{r details, echo=FALSE}
library(details) 

sessioninfo::session_info() %>%
  details::details(summary = 'session information')
```
