---
title: Circle Love - making hearts with circles
date: '2019-05-08'
categories:
  - generative art
tags:
  - generative art
summary: Generative art, pretty hearts with circles.
image:
  preview_only: true
---

```{r setup, include=FALSE}
library(knitr)
opts_chunk$set(
  echo = TRUE, 
  cache = TRUE,
  collapse = TRUE,
  fig.width = 7, 
  fig.align = 'center',
  fig.asp = 0.618, # 1 / phi
  out.width = "700px")
knit_hooks$set(optipng = hook_optipng)
opts_chunk$set("optipng" = "-o5")
```


# Why are we here?

Some days ago I saw this little cute pen and it sparked something inside me. 

<p class="codepen" data-height="265" data-theme-id="0" data-default-tab="html,result" data-user="chrisgannon" data-slug-hash="EJBxRx" style="height: 265px; box-sizing: border-box; display: flex; align-items: center; justify-content: center; border: 2px solid; margin: 1em 0; padding: 1em;" data-pen-title="Heart is Home">
  <span>See the Pen <a href="https://codepen.io/chrisgannon/pen/EJBxRx/">
  Heart is Home</a> by Chris Gannon (<a href="https://codepen.io/chrisgannon">chrisgannon</a>)
  on <a href="https://codepen.io">CodePen</a>.</span>
</p>
<script async src="https://static.codepen.io/assets/embed/ei.js"></script>

I throw together some lines of code and took my first splash into using [simple Features](https://github.com/r-spatial/sf). This post is not meant as an introduction to sf, a great introduction to the sf objects is made by [Jesse Sadler](https://www.jessesadler.com/post/simple-feature-objects/).

# Loading packages

```{r, message=FALSE}
library(tidyverse)
library(sf)
library(patchwork)
```

# First run

First, we create the center shape. I have gone for the heart shape, for which I found a parametric expression, I have wrapped all of this in a little function such that I can specify the number of points the polygon has.

```{r}
heart_fun <- function(n) {
  t <- c(seq(0, 2 * pi, length.out = n), 0)
  
  out <- data.frame(
    x = c(16 * sin(t) ^ 3),
    y = 13 * cos(t) - 5 * cos(2 * t) - 2 * cos(3 * t) - cos(4 * t)
  )
  out <- as.matrix(out)
  out <- list(out)
  st_polygon(out)
}
```

Let us check that the function works

```{r}
heart_fun(100)
```

and that it plots correctly.

```{r}
plot(heart_fun(100))
```

We also create a helper function to create a unit circle.

```{r}
circle_fun <- function(n) {
  t <- c(seq(0, 2 * pi, length.out = n), 0)
  
  out <- data.frame(
    x = sin(t),
    y = cos(t)
  )
  out <- as.matrix(out)
  out <- list(out)
  st_polygon(out)
}

plot(circle_fun(100))
```


So we have a heart shape, lets check the boundaries of that shape.

```{r}
st_bbox(heart_fun(100))
```

Lets generate a sf polygon of both the heart and circle polygon.

```{r}
circle <- circle_fun(100)
heart <- heart_fun(100)
```

Next, we want to generate a list of candidate points where we try to place circles. for now we will just randomly sample between -25 and 25 on the x-axis and -20 and 20 on the y axis. then we will save them as an sf object.

```{r}
points <- data.frame(x = runif(250, -25, 25),
                     y = runif(250, -20, 20)) %>% 
  sf::st_as_sf(coords = c(1, 2))

plot(points)
```

Next, we will filter the points such that we only consider points that are outside the heart shape.

```{r}
points <- points[!lengths(st_intersects(points, heart)), ]
plot(points)
```

Next, we will loop through every single point and calculate the distance (using `st_distance`) from the point to the heart. then we will place a circle on that point and scale it such that it has a radius equal to the distance we calculated. That way the heart shape should show given enough points.

```{r}
all_polygons <- map(points[[1]],
    ~ (circle * st_distance(heart, .x, by_element = TRUE)) + .x) %>%
  st_sfc()
```

```{r}
plot(all_polygons)
```

And we get something nice! however, some of the circles become quite big. Let's bound the radius and give it some variation.

```{r}
bound <- function(x, limit) {
  ifelse(x > limit, runif(1, limit / 4, limit), x)
}

all_polygons <- map(points[[1]],
    ~ (circle * bound(st_distance(heart, .x, by_element = TRUE), 4)) + .x) %>%
  st_sfc()

plot(all_polygons)
```

Now let's turn this into a data.frame and extract the x and y coordinate so we can use them for coloring.

```{r}
plotting_data <- data.frame(all_polygons) %>%
  mutate(x = map_dbl(geometry, ~st_centroid(.x)[[1]]),
         y = map_dbl(geometry, ~st_centroid(.x)[[2]])) 
```

Now that we have everything we need we will turn to `ggplot2` to pretty everything up.

```{r}
plotting_data %>%
  ggplot() +
  geom_sf(aes(color = y, geometry = geometry), alpha = 0.2, fill = NA) +
  coord_sf(datum = NA) +
  theme_void() + 
  guides(color = "none")
```

And we are done! It looks nice and pretty, now there is a bunch of things we can change.

- color scales
- coloring patterns
- circle arrangement (rectangle, circle, buffer)

# One function plotting

Everything from before is not wrapped up nicely and tight in this function.

```{r}
circle_heart <- function(n, center_sf, outside_sf, outside_filter = "None", plotting_margin = 5, ...) {
  
  bound <- function(x, limit) {
    ifelse(x > limit, runif(1, limit / 4, limit), x)
  }
  
  range <- st_bbox(center_sf)
  points <- data.frame(x = runif(n, range[["xmin"]] - plotting_margin, 
                                    range[["xmax"]] + plotting_margin),
                       y = runif(n, range[["ymin"]] - plotting_margin, 
                                    range[["ymax"]] + plotting_margin)) %>% 
    sf::st_as_sf(coords = c(1, 2))
  
  if (outside_filter == "buffer") {
    points <- st_intersection(points, st_buffer(center_sf, plotting_margin))
  } 
  
  points <- points[!lengths(st_intersects(points, center_sf)), ]
  
  all_polygons <- map(points[[1]],
    ~ (outside_sf * bound(st_distance(center_sf, .x, by_element = TRUE), 4)) + .x) %>%
  st_sfc()
  
  plotting_data <- data.frame(all_polygons) %>%
  mutate(x = map_dbl(geometry, ~st_centroid(.x)[[1]]),
         y = map_dbl(geometry, ~st_centroid(.x)[[2]])) 
  
  plotting_data %>%
    ggplot() +
    geom_sf(..., mapping = aes(geometry = geometry)) +
    coord_sf(datum = NA) +
    theme_void()
}
```

It returns a simple ggplot2 object that we then can further modify to our visual liking.

```{r}
circle_heart(300, heart_fun(100), circle_fun(100))
```

A handful of examples

```{r}
p1 <- circle_heart(300, heart_fun(100), circle_fun(100), 
                   plotting_margin = 10, fill = NA) +
  aes(color = sin(x / y)) +
  scale_color_viridis_c() +
  guides(color = "none")

p2 <- circle_heart(300, heart_fun(100), circle_fun(100), 
                   outside_filter = "buffer", plotting_margin = 10, color = NA, alpha = 0.4) +
  aes(fill = cos(x / y)) +
  scale_fill_viridis_c(option = "A") +
  guides(fill = "none")

p3 <- circle_heart(300, heart_fun(100), circle_fun(5), 
                   outside_filter = "buffer", plotting_margin = 10, color = NA, alpha = 0.4) +
  aes(fill = x + y) +
  scale_fill_gradient(low = "pink", high = "black") +
  guides(fill = "none")

p4 <- circle_heart(500, heart_fun(100), circle_fun(4), 
                   outside_filter = "buffer", plotting_margin = 10, color = NA, alpha = 0.4) +
  aes(fill = atan2(y, x)) +
  scale_fill_gradientn(colours = rainbow(256)) +
  guides(fill = "none")

p5 <- circle_heart(300, heart_fun(100), circle_fun(10), 
                   outside_filter = "buffer", plotting_margin = 10, color = NA, alpha = 0.4) +
  aes(fill = factor(floor(x * y) %% 8)) +
  scale_fill_brewer(palette = "Set1") +
  guides(fill = "none")

p6 <- circle_heart(500, heart_fun(100), heart_fun(100) / 20, 
                   outside_filter = "buffer", plotting_margin = 10, color = "grey70", alpha = 0.4) +
  aes(fill = (y %% 4) * (x %% 1)) +
  scale_fill_gradientn(colours = cm.colors(256)) +
  guides(fill = "none")

p1 + p2 + p3 + p4 + p5 + p6 + plot_layout(ncol = 3)
```

```{r details, echo=FALSE}
library(details) 

sessioninfo::session_info() %>%
  details::details(summary = 'session information')
```
